{"ast":null,"code":"var _jsxFileName = \"/Users/milosdjurkovic/MockIMDB/src/Component/Movie page/Single movie/Comments/commentsForm.js\";\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport { __RouterContext as RouterContext } from 'react-router';\nimport { CommentsContext } from '../index';\nimport axios from 'axios';\nconst WriteCommentError = styled.div`\n    color: red;\n`;\nconst CommentTextarea = styled.textarea`\n    width: 100%;\n    min-height: 100px;\n`;\n\nconst CommentForm = () => {\n  const [movie, setMovie] = useContext(CommentsContext);\n  const comments = movie.comments;\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const useRouter = () => useContext(RouterContext);\n\n  const {\n    match\n  } = useRouter();\n  const movieId = match.params.id;\n  const lastCommentId = comments.length ? comments[comments.length - 1].id : 0;\n\n  const onSubmit = comment => {\n    reset();\n    const newComment = {\n      createdAt: new Date(),\n      text: comment.text,\n      id: lastCommentId + 1,\n      movieId: movieId\n    };\n    axios.post(`https://5fe8885b2e12ee0017ab47c0.mockapi.io/api/v1/movies/${movieId}/comments`, { ...newComment\n    }).then(setMovie(prevState => ({ ...prevState,\n      comments: [...comments, newComment]\n    }))).catch(() => alert('Maximum API requests reached'));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(CommentTextarea, {\n    placeholder: \"Write comment\",\n    name: \"text\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), errors.text && /*#__PURE__*/React.createElement(WriteCommentError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }, \"This field is required\"));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["/Users/milosdjurkovic/MockIMDB/src/Component/Movie page/Single movie/Comments/commentsForm.js"],"names":["React","useContext","styled","useForm","__RouterContext","RouterContext","CommentsContext","axios","WriteCommentError","div","CommentTextarea","textarea","CommentForm","movie","setMovie","comments","register","handleSubmit","errors","reset","useRouter","match","movieId","params","id","lastCommentId","length","onSubmit","comment","newComment","createdAt","Date","text","post","then","prevState","catch","alert","required"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,SAAQC,eAAe,IAAIC,aAA3B,QAA+C,cAA/C;AACA,SAAQC,eAAR,QAA8B,UAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,iBAAiB,GAAGN,MAAM,CAACO,GAAI;;CAArC;AAIA,MAAMC,eAAe,GAAGR,MAAM,CAACS,QAAS;;;CAAxC;;AAKA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACK,eAAD,CAApC;AACA,QAAMS,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA4ChB,OAAO,EAAzD;;AACA,QAAMiB,SAAS,GAAG,MAAMnB,UAAU,CAACI,aAAD,CAAlC;;AACA,QAAM;AAACgB,IAAAA;AAAD,MAAUD,SAAS,EAAzB;AACA,QAAME,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,EAA7B;AACA,QAAMC,aAAa,GAAGV,QAAQ,CAACW,MAAT,GAAkBX,QAAQ,CAACA,QAAQ,CAACW,MAAT,GAAkB,CAAnB,CAAR,CAA8BF,EAAhD,GAAqD,CAA3E;;AAEA,QAAMG,QAAQ,GAAGC,OAAO,IAAI;AACxBT,IAAAA,KAAK;AACL,UAAMU,UAAU,GAAG;AACfC,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EADI;AAEfC,MAAAA,IAAI,EAAEJ,OAAO,CAACI,IAFC;AAGfR,MAAAA,EAAE,EAAEC,aAAa,GAAG,CAHL;AAIfH,MAAAA,OAAO,EAAEA;AAJM,KAAnB;AAMAf,IAAAA,KAAK,CAAC0B,IAAN,CAAY,6DAA4DX,OAAQ,WAAhF,EAA4F,EACxF,GAAGO;AADqF,KAA5F,EAGKK,IAHL,CAGUpB,QAAQ,CAACqB,SAAS,KAAK,EACzB,GAAGA,SADsB;AACXpB,MAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAcc,UAAd;AADC,KAAL,CAAV,CAHlB,EAMKO,KANL,CAMY,MAAMC,KAAK,CAAC,8BAAD,CANvB;AAOH,GAfD;;AAiBA,sBAAO;AAAM,IAAA,QAAQ,EAAEpB,YAAY,CAACU,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH,oBAAC,eAAD;AAAiB,IAAA,WAAW,EAAC,eAA7B;AAA6C,IAAA,IAAI,EAAC,MAAlD;AAAyD,IAAA,GAAG,EAAEX,QAAQ,CAAC;AAACsB,MAAAA,QAAQ,EAAE;AAAX,KAAD,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,eAEH;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,EAGFpB,MAAM,CAACc,IAAP,iBAAe,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAHb,CAAP;AAKH,CA/BD;;AAiCA,eAAepB,WAAf","sourcesContent":["import React, {useContext} from 'react';\r\nimport styled from 'styled-components';\r\nimport {useForm} from 'react-hook-form';\r\nimport {__RouterContext as RouterContext} from 'react-router';\r\nimport {CommentsContext} from '../index';\r\nimport axios from 'axios';\r\n\r\nconst WriteCommentError = styled.div`\r\n    color: red;\r\n`;\r\n\r\nconst CommentTextarea = styled.textarea`\r\n    width: 100%;\r\n    min-height: 100px;\r\n`;\r\n\r\nconst CommentForm = () => {\r\n    const [movie, setMovie] = useContext(CommentsContext);\r\n    const comments = movie.comments;\r\n    const { register, handleSubmit, errors, reset } = useForm();\r\n    const useRouter = () => useContext(RouterContext);\r\n    const {match} = useRouter();\r\n    const movieId = match.params.id;\r\n    const lastCommentId = comments.length ? comments[comments.length - 1].id : 0;\r\n\r\n    const onSubmit = comment => {\r\n        reset();\r\n        const newComment = {\r\n            createdAt: new Date(),\r\n            text: comment.text,\r\n            id: lastCommentId + 1,\r\n            movieId: movieId\r\n        };\r\n        axios.post(`https://5fe8885b2e12ee0017ab47c0.mockapi.io/api/v1/movies/${movieId}/comments`, {\r\n            ...newComment\r\n        })\r\n            .then(setMovie(prevState => ({\r\n                ...prevState, comments: [...comments, newComment]\r\n            })))\r\n            .catch( () => alert('Maximum API requests reached'));\r\n    };\r\n\r\n    return <form onSubmit={handleSubmit(onSubmit)}>\r\n        <CommentTextarea placeholder=\"Write comment\" name=\"text\" ref={register({required: true})}/>\r\n        <input type=\"submit\"/>\r\n        {errors.text && <WriteCommentError>This field is required</WriteCommentError>}\r\n    </form>;\r\n};\r\n\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}