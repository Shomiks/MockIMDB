{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nconst apiKey = \"k_f1xb5k3v\";\nexport async function singleMovieData(id, nickname) {\n  console.log(nickname);\n  const movie = await axios(`http://localhost:5000/api/movies/${id}`);\n  const comments = await axios(`http://localhost:5000/api/comments?movieId=${id}`);\n  const users = nickname && (await axios.put(`http://localhost:5000/api/users`, {\n    nickname: nickname\n  }));\n  const trailer = await axios(`https://imdb-api.com/API/YouTubeTrailer/${apiKey}/${movie.data.imdbId}`);\n  return {\n    movie,\n    comments,\n    trailer,\n    users\n  };\n}\nexport const useMoviesApi = () => {\n  const [movies, setMovies] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const categories = await axios(\"http://localhost:5000/api/categories\");\n      const movies = await axios(\"http://localhost:5000/api/movies\");\n      setCategories(categories.data);\n      setMovies(movies.data);\n    };\n\n    fetchMovies().then(() => setLoading(false));\n  }, []);\n  return {\n    movies,\n    categories,\n    loading\n  };\n};","map":{"version":3,"sources":["/Users/milosdjurkovic/MockIMDB/src/Component/Home page/Movies/useMoviesApi.js"],"names":["axios","useEffect","useState","apiKey","singleMovieData","id","nickname","console","log","movie","comments","users","put","trailer","data","imdbId","useMoviesApi","movies","setMovies","categories","setCategories","loading","setLoading","fetchMovies","then"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,MAAM,GAAG,YAAf;AAEA,OAAO,eAAeC,eAAf,CAA+BC,EAA/B,EAAmCC,QAAnC,EAA6C;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAMG,KAAK,GAAG,MAAMT,KAAK,CAAE,oCAAmCK,EAAG,EAAxC,CAAzB;AACA,QAAMK,QAAQ,GAAG,MAAMV,KAAK,CACzB,8CAA6CK,EAAG,EADvB,CAA5B;AAGA,QAAMM,KAAK,GAAGL,QAAQ,KAAI,MAAMN,KAAK,CAACY,GAAN,CAAW,iCAAX,EAA6C;AAC3EN,IAAAA,QAAQ,EAAEA;AADiE,GAA7C,CAAV,CAAtB;AAGA,QAAMO,OAAO,GAAG,MAAMb,KAAK,CACxB,2CAA0CG,MAAO,IAAGM,KAAK,CAACK,IAAN,CAAWC,MAAO,EAD9C,CAA3B;AAIA,SAAO;AACLN,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLG,IAAAA,OAHK;AAILF,IAAAA;AAJK,GAAP;AAMD;AAED,OAAO,MAAMK,YAAY,GAAG,MAAM;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,WAAW,GAAG,YAAY;AAC9B,YAAMJ,UAAU,GAAG,MAAMnB,KAAK,CAAC,sCAAD,CAA9B;AACA,YAAMiB,MAAM,GAAG,MAAMjB,KAAK,CAAC,kCAAD,CAA1B;AACAoB,MAAAA,aAAa,CAACD,UAAU,CAACL,IAAZ,CAAb;AACAI,MAAAA,SAAS,CAACD,MAAM,CAACH,IAAR,CAAT;AACD,KALD;;AAMAS,IAAAA,WAAW,GAAGC,IAAd,CAAmB,MAAMF,UAAU,CAAC,KAAD,CAAnC;AACD,GARQ,EAQN,EARM,CAAT;AAUA,SAAO;AACLL,IAAAA,MADK;AAELE,IAAAA,UAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CApBM","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst apiKey = \"k_f1xb5k3v\";\n\nexport async function singleMovieData(id, nickname) {\n  console.log(nickname)\n  const movie = await axios(`http://localhost:5000/api/movies/${id}`);\n  const comments = await axios(\n    `http://localhost:5000/api/comments?movieId=${id}`\n  );\n  const users = nickname && await axios.put(`http://localhost:5000/api/users`, {\n    nickname: nickname\n  });\n  const trailer = await axios(\n    `https://imdb-api.com/API/YouTubeTrailer/${apiKey}/${movie.data.imdbId}`\n  );\n\n  return {\n    movie,\n    comments,\n    trailer,\n    users,\n  };\n}\n\nexport const useMoviesApi = () => {\n  const [movies, setMovies] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const categories = await axios(\"http://localhost:5000/api/categories\");\n      const movies = await axios(\"http://localhost:5000/api/movies\");\n      setCategories(categories.data);\n      setMovies(movies.data);\n    };\n    fetchMovies().then(() => setLoading(false));\n  }, []);\n\n  return {\n    movies,\n    categories,\n    loading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}