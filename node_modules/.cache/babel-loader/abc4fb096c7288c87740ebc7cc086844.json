{"ast":null,"code":"var _jsxFileName = \"/Users/milosdjurkovic/MockIMDB/src/Component/Movie page/Single movie/Comments/commentsForm.js\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport { __RouterContext as RouterContext } from \"react-router\";\nimport { CommentsContext } from \"../index\";\nimport axios from \"axios\";\nconst WriteCommentError = styled.div`\n  color: red;\n`;\nconst CommentTextarea = styled.textarea`\n  width: 100%;\n  min-height: 100px;\n`;\n\nconst CommentForm = () => {\n  const [movie, setMovie] = useContext(CommentsContext);\n  const comments = movie.comments;\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n\n  const useRouter = () => useContext(RouterContext);\n\n  const {\n    match\n  } = useRouter();\n  const movieId = match.params.id;\n  const lastCommentId = comments.length ? comments[comments.length - 1].id + 1 : 0;\n\n  const onSubmit = comment => {\n    console.log(comment);\n    reset();\n    const newComment = {\n      comment: comment.text,\n      movieId: movieId,\n      id: lastCommentId\n    };\n    axios.post(`http://localhost:5000/api/comments?movieId=${movieId}`, { ...newComment\n    }).then(setMovie(prevState => ({ ...prevState,\n      comments: [...comments, newComment]\n    }))).catch(() => alert(\"Bad api call\"));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CommentTextarea, {\n    placeholder: \"Write comment\",\n    name: \"text\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), errors.text && /*#__PURE__*/React.createElement(WriteCommentError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"This field is required\"));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["/Users/milosdjurkovic/MockIMDB/src/Component/Movie page/Single movie/Comments/commentsForm.js"],"names":["React","useContext","styled","useForm","__RouterContext","RouterContext","CommentsContext","axios","WriteCommentError","div","CommentTextarea","textarea","CommentForm","movie","setMovie","comments","register","handleSubmit","errors","reset","useRouter","match","movieId","params","id","lastCommentId","length","onSubmit","comment","console","log","newComment","text","post","then","prevState","catch","alert","required"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,eAAe,IAAIC,aAA5B,QAAiD,cAAjD;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,iBAAiB,GAAGN,MAAM,CAACO,GAAI;;CAArC;AAIA,MAAMC,eAAe,GAAGR,MAAM,CAACS,QAAS;;;CAAxC;;AAKA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACK,eAAD,CAApC;AACA,QAAMS,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,MAA4ChB,OAAO,EAAzD;;AACA,QAAMiB,SAAS,GAAG,MAAMnB,UAAU,CAACI,aAAD,CAAlC;;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAYD,SAAS,EAA3B;AACA,QAAME,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,EAA7B;AACA,QAAMC,aAAa,GAAGV,QAAQ,CAACW,MAAT,GAClBX,QAAQ,CAACA,QAAQ,CAACW,MAAT,GAAkB,CAAnB,CAAR,CAA8BF,EAA9B,GAAmC,CADjB,GAElB,CAFJ;;AAIA,QAAMG,QAAQ,GAAIC,OAAD,IAAa;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAT,IAAAA,KAAK;AACL,UAAMY,UAAU,GAAG;AACjBH,MAAAA,OAAO,EAAEA,OAAO,CAACI,IADA;AAEjBV,MAAAA,OAAO,EAAEA,OAFQ;AAGjBE,MAAAA,EAAE,EAAEC;AAHa,KAAnB;AAKAlB,IAAAA,KAAK,CACF0B,IADH,CACS,8CAA6CX,OAAQ,EAD9D,EACiE,EAC7D,GAAGS;AAD0D,KADjE,EAIGG,IAJH,CAKIpB,QAAQ,CAAEqB,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBpB,MAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAcgB,UAAd;AAFa,KAAhB,CAAD,CALZ,EAUGK,KAVH,CAUS,MAAMC,KAAK,CAAC,cAAD,CAVpB;AAWD,GAnBD;;AAqBA,sBACE;AAAM,IAAA,QAAQ,EAAEpB,YAAY,CAACU,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,WAAW,EAAC,eADd;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,GAAG,EAAEX,QAAQ,CAAC;AAAEsB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOGpB,MAAM,CAACc,IAAP,iBACC,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BARJ,CADF;AAaD,CA7CD;;AA+CA,eAAepB,WAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\nimport { __RouterContext as RouterContext } from \"react-router\";\nimport { CommentsContext } from \"../index\";\nimport axios from \"axios\";\n\nconst WriteCommentError = styled.div`\n  color: red;\n`;\n\nconst CommentTextarea = styled.textarea`\n  width: 100%;\n  min-height: 100px;\n`;\n\nconst CommentForm = () => {\n  const [movie, setMovie] = useContext(CommentsContext);\n  const comments = movie.comments;\n  const { register, handleSubmit, errors, reset } = useForm();\n  const useRouter = () => useContext(RouterContext);\n  const { match } = useRouter();\n  const movieId = match.params.id;\n  const lastCommentId = comments.length\n    ? comments[comments.length - 1].id + 1\n    : 0;\n\n  const onSubmit = (comment) => {\n    console.log(comment);\n    reset();\n    const newComment = {\n      comment: comment.text,\n      movieId: movieId,\n      id: lastCommentId,\n    };\n    axios\n      .post(`http://localhost:5000/api/comments?movieId=${movieId}`, {\n        ...newComment,\n      })\n      .then(\n        setMovie((prevState) => ({\n          ...prevState,\n          comments: [...comments, newComment],\n        }))\n      )\n      .catch(() => alert(\"Bad api call\"));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <CommentTextarea\n        placeholder=\"Write comment\"\n        name=\"text\"\n        ref={register({ required: true })}\n      />\n      <input type=\"submit\" />\n      {errors.text && (\n        <WriteCommentError>This field is required</WriteCommentError>\n      )}\n    </form>\n  );\n};\n\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}